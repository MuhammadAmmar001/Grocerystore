import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.*;
import java.util.Scanner;

/**
 * Represents a graphical user interface for user login and account creation.
 * Provides text fields for username and password entry, along with login and
 * account creation buttons.
 * Allows users to toggle password visibility and displays the login status.
 */
class LoginFrame implements ActionListener {
    JFrame frame = new JFrame("LOGIN FORM");

    // User interface elements
    JLabel userLabel = new JLabel("USERNAME"), label;
    JLabel passwordLabel = new JLabel("PASSWORD");
    JTextField userTextField = new JTextField();
    JPasswordField passwordField = new JPasswordField();
    JButton loginButton = new JButton("LOGIN");
    JButton createAccount = new JButton("CREATE ACCOUNT");
    JCheckBox showPassword = new JCheckBox("Show Password");
    JLabel pwdRes = new JLabel();

    /**
     * Initializes the UI components and sets up the login frame.
     * Configures the layout, adds components, and sets frame properties.
     */
    LoginFrame() {
        setLayoutManager();
        setLocationAndSize();
        addComponentsToContainer();
        addActionEvent();
        setBackgroundImage();
        frame.setVisible(true);
        frame.setExtendedState(JFrame.MAXIMIZED_BOTH);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setResizable(true);
    }

    /**
     * Sets the background image for the login frame.
     * Loads an image and adds it to the frame as a JLabel.
     */
    public void setBackgroundImage() {
        ImageIcon image = new ImageIcon("mart.jpg");
        label = new JLabel(image);
        label.setBounds(0, 0, 1650, 1080);
        frame.add(label);
    }

    /**
     * Configures the layout manager for the frame.
     * Sets the layout to null for explicit component placement.
     */
    public void setLayoutManager() {
        frame.setLayout(null);
    }

    /**
     * Specifies the location and size of UI components in the frame.
     * Defines the positions and dimensions of labels, text fields, buttons, and
     * checkboxes.
     */
    public void setLocationAndSize() {
        userLabel.setForeground(Color.white);
        userLabel.setFont(new Font("Arial", Font.BOLD, 20));
        userLabel.setBounds(600, 300, 200, 30);
        passwordLabel.setBounds(600, 350, 200, 30);
        passwordLabel.setFont(new Font("Arial", Font.BOLD, 20));
        passwordLabel.setForeground(Color.white);
        userTextField.setBounds(750, 300, 200, 30);
        passwordField.setBounds(750, 350, 200, 30);
        passwordField.setEchoChar('*');
        showPassword.setBounds(750, 400, 200, 30);
        showPassword.setFocusable(false);
        loginButton.setBounds(630, 500, 100, 30);
        loginButton.setFocusable(false);
        createAccount.setBounds(770, 500, 150, 30);
        pwdRes.setFont(new Font("Arial", Font.PLAIN, 20));
        pwdRes.setBounds(630, 600, 500, 25);
    }

    /**
     * Adds user interface components to the frame.
     * Places labels, text fields, buttons, and checkboxes on the frame.
     */
    public void addComponentsToContainer() {
        frame.add(userLabel);
        frame.add(passwordLabel);
        frame.add(userTextField);
        frame.add(passwordField);
        frame.add(showPassword);
        frame.add(loginButton);
        frame.add(createAccount);
        frame.add(pwdRes);
    }

    /**
     * Adds action listeners to handle user interactions with UI components.
     * Attaches action listeners for login, create account buttons, and password
     * visibility toggle.
     */
    public void addActionEvent() {
        loginButton.addActionListener(this);
        createAccount.addActionListener(this);
        showPassword.addActionListener(this);
    }

    /**
     * Handles various actions triggered by UI components.
     * Validates user login credentials and manages actions based on button clicks
     * and checkbox selections.
     * Reads user data file, validates credentials, logs in users, resets fields,
     * and toggles password visibility.
     *
     * @param e ActionEvent generated by user interactions with UI components.
     */
    @Override
    public void actionPerformed(ActionEvent e) {
        // Action performed when 'Create Account' button is clicked
        if (e.getSource() == createAccount) {
            Registration registration = new Registration();
        }
        // Action performed when 'Login' button is clicked
        if (e.getSource() == loginButton) {
            String status = "";
            String userText;
            String pwdText;
            userText = "{" + userTextField.getText() + "}";
            pwdText = "{" + String.valueOf(passwordField.getPassword()) + "}";
            File UserFile = new File(
                    "userfile.txt");
            // Reads the user data file to validate the entered credentials
            try {
                FileReader userFileReader = new FileReader(UserFile);
                Scanner userFileScanner = new Scanner(UserFile);
                while (userFileScanner.hasNextLine()) {
                    String line = userFileScanner.nextLine();
                    if (line.contains(userText) && line.contains(pwdText) && !userText.equals("")
                            && !pwdText.equals("")) {
                        File cart = new File(
                                "cart.txt");
                        FileWriter fileWriter = new FileWriter(cart);
                        status = "SUCCESSFULLY LOGGED IN";
                        MENU menu = new MENU();
                        frame.dispose();

                        break;
                    }

                    else {
                        status = "WRONG PASSWORD";

                    }
                }
                pwdRes.setText(status);

                //
            } catch (FileNotFoundException ex) {
                ex.printStackTrace();
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        }
        // Reset functionality triggered by 'Create Account' button
        if (e.getSource() == createAccount) {
            userTextField.setText("");
            passwordField.setText("");
        }
        // Toggle password visibility based on 'Show Password' checkbox selection
        if (e.getSource() == showPassword) {
            if (showPassword.isSelected()) {
                passwordField.setEchoChar((char) 0);
            } else {
                passwordField.setEchoChar('*');
            }
        }
    }
}

/**
 * Main class to initialize the login frame and start the application.
 */
public class Main {

    /**
     * Entry point to start the application.
     * Initializes the login frame for user authentication.
     *
     * @param a Command-line arguments (not used here).
     */
    public static void main(String[] a) {
        LoginFrame loginFrame = new LoginFrame();
    }
}
